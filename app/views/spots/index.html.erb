<gmp-map
  id= "map"
  style= "height: 100%; width: 100%;"
  map-id= "<%= ENV['GOOGLE_MAPS_ID_API_KEY'] %>"
  center= "35.8940, 139.6280"
  zoom= "15"
>
</gmp-map>

<style>
  gmp-map {
    position: absolute;
    top: 64px;
    bottom: 80px;
    width: 100%;
  }
</style>

<script>
  async function initMap() {
    if (!window.google || !window.google.maps) {
      console.error('Google Maps API is not loaded');
      return;
    }

    // dmp-mapはマップの読み込みを自動でしてくれるため、const { Map } は削除
    const { InfoWindow } = await google.maps.importLibrary("maps");
    const { AdvancedMarkerElement, PinElement } = await google.maps.importLibrary("marker");
    
    // 地図要素を取得
    const gmpMap = document.getElementById('map');

    console.log("gmp:",gmpMap.innerMap);
    const map = await gmpMap.innerMap;

    // 現在地を取得
    // ブラウザに位置情報の取得を依頼する関数です。成功すると、現在地の情報が position オブジェクトとして渡されます。
    navigator.geolocation.getCurrentPosition(function (position) {
      // 「LatLng: 地理座標（緯度と経度）」で表される地点の枠を新方式で作り「userLatLng」に入れる
      const userLatLng = {
        lat: position.coords.latitude, 
        lng: position.coords.longitude
      };

      console.log("map",map)

      map.setCenter(userLatLng);

      // 初期化は一番上で設定。 
      // map = new Map(mapElement, {
      //   center: userLatLng,
      //   zoom: 15,
      //   mapId: "<%= ENV['GOOGLE_MAPS_ID_API_KEY'] %>"
      // });

      const pinCurrentLocation = new PinElement({
        background: "#0080c6",
        borderColor: "#0080ff",
        glyphColor: '#ffffff',

      });

      // 現在地のマーカーを入れる
      new AdvancedMarkerElement({
        map: map,
        position: userLatLng,
        content: pinCurrentLocation.element,
      });

      // 投稿されているマーカーを追加
      <% @spots.each do |spot| %>
        (
          function(){
            const marker = new AdvancedMarkerElement({
              position: {lat: <%= spot.latitude %>, lng: <%= spot.longitude %>},
              map: map,
              // j は Rails の escape_javascript ヘルパーの省略記法。JavaScript に埋め込む文字列を安全に変換（エスケープ）するために使用
              title: '<%= j spot.name %>'
            })

            // 吹き出しの追加
            const infoWindow = new InfoWindow({
              content: 
                    `
                      <%= j spot.name %><br>
                      <%= j spot.summary %><br>
                      <br>
                      <a href="<%= h spot_path(spot) %>">詳細はこちら</a>
                    `
            });

            // マーカーにクリックイベントを追加
            marker.addListener('gmp-click', function() {
              infoWindow.open(map, marker);
            });

          }
        )();
      <% end %>
    });
  }
</script>

 <%# Dynamic Library Import API に移行する為に
     ダイレクト スクリプト読み込みタグをインライン ブートストラップ ローダのタグに置き換え %>
<script>
  if (!window.googleMapsLoaded) {
    (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
      key: "<%= ENV['GOOGLE_MAPS_API_KEY'] %>",
      v: "weekly",
    });

    window.googleMapsLoaded = true;
  }
</script>

<script>
  window.addEventListener('load', function() {
    // APIが既に読み込まれている場合はすぐに実行、そうでなければ少し待つ
    if (window.google && window.google.maps) {
      initMap();
    } else {
      setTimeout(initMap, 100);
    }
  });
</script>

